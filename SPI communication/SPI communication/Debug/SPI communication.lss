
SPI communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d99  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c44  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a0  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a9  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000029bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	80 c0       	rjmp	.+256    	; 0x146 <__vector_17>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	b4 c0       	rjmp	.+360    	; 0x1ce <__vector_25>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	64 d0       	rcall	.+200    	; 0x1be <main>
  f6:	97 c0       	rjmp	.+302    	; 0x226 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <SPI_Init>:
	OCR1A = 31249;
}

void SPI_Init()
{
	DDRB |= (1<<PB2) | (1<<PB1) | (1<<PB0); // Set MOSI, SCK and SS as output pins
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	87 60       	ori	r24, 0x07	; 7
  fe:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PB3); // Set MISO as input pin
 100:	23 98       	cbi	0x04, 3	; 4
	
	PORTB |= (1<<PB0); //Set SS pin high
 102:	28 9a       	sbi	0x05, 0	; 5
	
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0); // Enable SPI i master mode 21.2.1 with a frequency of fosc/16
 104:	8c b5       	in	r24, 0x2c	; 44
 106:	81 65       	ori	r24, 0x51	; 81
 108:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<CPOL);
 10a:	8c b5       	in	r24, 0x2c	; 44
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<CPHA);
 110:	8c b5       	in	r24, 0x2c	; 44
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1<<SPI2X); // Disable speed double 21.2.2
 116:	8d b5       	in	r24, 0x2d	; 45
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	8d bd       	out	0x2d, r24	; 45
 11c:	08 95       	ret

0000011e <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	95 ff       	sbrs	r25, 5
 126:	fd cf       	rjmp	.-6      	; 0x122 <USART_Transmit+0x4>
	UDR0 = data;	
 128:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 12c:	08 95       	ret

0000012e <SPI_Read>:
	
}

char SPI_Read()
{
	SPDR = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 132:	0d b4       	in	r0, 0x2d	; 45
 134:	07 fe       	sbrs	r0, 7
 136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_Read+0x4>
	return SPDR;
 138:	8e b5       	in	r24, 0x2e	; 46
}
 13a:	08 95       	ret

0000013c <SPI_Write>:

void SPI_Write(char data)
{
	SPDR = data;
 13c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF))); // Waits for transmission to complete
 13e:	0d b4       	in	r0, 0x2d	; 45
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <SPI_Write+0x2>
}
 144:	08 95       	ret

00000146 <__vector_17>:
#include <avr/interrupt.h>
#include <util/setbaud.h>
#include <ctype.h>

ISR(TIMER1_COMPA_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	LED_TOOGLE;	
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	80 58       	subi	r24, 0x80	; 128
 170:	85 b9       	out	0x05, r24	; 5
	SPI_Write('A');
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	e2 df       	rcall	.-60     	; 0x13c <SPI_Write>
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0b be       	out	0x3b, r0	; 59
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <USART_Init>:
	while (!(SPSR & (1<<SPIF))); // Waits for transmission to complete
}

void USART_Init()
{
	UCSR0B = (1 << RXEN0 ) | (1 << TXEN0 ); // Turn on the transmission and reception circuitry 22.10.3
 19e:	e1 ec       	ldi	r30, 0xC1	; 193
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	88 e1       	ldi	r24, 0x18	; 24
 1a4:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ00 ) | (1 << UCSZ01 ); // Use 8- bit character sizes 22.10.4
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

	UBRR0H = UBRRH_VALUE; // Sets baud rate to defined BAUD
 1ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = UBRRL_VALUE ;
 1b0:	87 e6       	ldi	r24, 0x67	; 103
 1b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	UCSR0B |= (1 << RXCIE0 ); // Enable the USART Receive Complete interrupt ( USART0_RXC ) 22.10.3
 1b6:	80 81       	ld	r24, Z
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <main>:
}

int main(void)
{
	DDRB |= (1<<PB7); // Onboard LED to output
 1be:	27 9a       	sbi	0x04, 7	; 4
	
	USART_Init();
 1c0:	ee df       	rcall	.-36     	; 0x19e <USART_Init>
	SPI_Init();
 1c2:	9b df       	rcall	.-202    	; 0xfa <SPI_Init>
 1c4:	78 94       	sei
	//Timer_Init();
	sei();
	SS_ENABLE;
	
    while (1) {
		USART_Transmit(SPI_Read());
 1c6:	28 98       	cbi	0x05, 0	; 5
 1c8:	b2 df       	rcall	.-156    	; 0x12e <SPI_Read>
 1ca:	a9 df       	rcall	.-174    	; 0x11e <USART_Transmit>
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <main+0xa>

000001ce <__vector_25>:
 1ce:	1f 92       	push	r1
	} // Loops program forever
}

ISR ( USART0_RX_vect )
{
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	0b b6       	in	r0, 0x3b	; 59
 1da:	0f 92       	push	r0
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	char Message ;
	Message = UDR0 ; // Fetch the received byte value
 1f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	LED_TOOGLE;
 1f8:	95 b1       	in	r25, 0x05	; 5
 1fa:	90 58       	subi	r25, 0x80	; 128
 1fc:	95 b9       	out	0x05, r25	; 5
	SPI_Write(Message) ; // Write the message over the SPI pins to the slave
 1fe:	9e df       	rcall	.-196    	; 0x13c <SPI_Write>
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0b be       	out	0x3b, r0	; 59
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
